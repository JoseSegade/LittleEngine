#version 430 compatibility
#extension GL_ARB_compute_shader: enable
#extension GL_ARB_shader_storage_buffer_object: enable

struct Particle {
    vec4 position;
	vec4 velocity;
	vec4 color;
	vec4 lifetime;
};

struct Atractor {
    vec4 position;
	vec4 force;
};

layout(std140, binding=0) buffer Part {
    Particle particles[ ];
};

layout(std140, binding=1) buffer Atra {
    Atractor atractors[ ];
};

layout(local_size_x=128, local_size_y=1, local_size_z=1) in;

layout(location=0) uniform int    particlesCount;
layout(location=1) uniform float  timeStep;
layout(location=2) uniform vec4   gravity;
layout(location=3) uniform vec4   spherePos;

vec4 Bounce(vec3 vin, vec3 n)
{
    vec3 vout = reflect(vin, n);
	return vec4(vout, 0.0);
}

vec4 BounceSphere(vec4 p, vec4 v, vec4 s)
{
    vec3 n = normalize(p.xyz - s.xyz);
	return Bounce(v.xyz, n);
}

bool IsInsideSphere(vec4 p, vec4 s)
{
    float r = length(p.xyz - s.xyz);
	return (r < s.w);
}

void main()
{
    uint gid = gl_GlobalInvocationID.x;

	Particle outPart = particles[gid];

	vec4 p = particles[gid].position;
	vec4 v = particles[gid].velocity;

	vec4 vp = v + gravity*timeStep;
	vec4 pp = p + vp * timeStep + .5 * timeStep * timeStep * gravity;

	for(int i = 0; i < atractors.length(); ++i)
	{
	}

	vec4 attractorForce = vec4(dx, dy, dz, 1);
	pp +=attractorForce;

	if(IsInsideSphere(pp, spherePos))
	{
	    vp = BounceSphere(p, v, spherePos);
		pp = p + vp * timeStep + .5 * timeStep * timeStep * gravity;
	}


	outPart.velocity = vp;
	outPart.position = pp;

	particles[gid] = outPart; 
}